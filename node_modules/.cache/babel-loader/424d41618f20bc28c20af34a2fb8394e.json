{"ast":null,"code":"var _jsxFileName = \"/home/carlos/Escritorio/proyecto progra/cloneWp/src/context/usersContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport contacts from \"data/contacts\";\nimport { useSocketContext } from \"./socketContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UsersContext = /*#__PURE__*/createContext();\n\nconst useUsersContext = () => {\n  _s();\n\n  return useContext(UsersContext);\n};\n\n_s(useUsersContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nconst UsersProvider = ({\n  children\n}) => {\n  _s2();\n\n  const socket = useSocketContext();\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  const [users, setUsers] = useState(contacts);\n\n  const _updateUserProp = (userId, prop, value) => {\n    setUsers(users => {\n      const usersCopy = [...users];\n      let userIndex = users.findIndex(user => user.id === userId);\n      const userObject = usersCopy[userIndex];\n      usersCopy[userIndex] = { ...userObject,\n        [prop]: value\n      }; //\tconsole.log(usersCopy[userIndex].id+\"   envia\");\n\n      return usersCopy;\n    });\n  };\n\n  const setUserAsUnread = userId => {\n    _updateUserProp(userId, \"unread\", 0); //\tconsole.log(userId+\"   r1111egresa\");\n\n  };\n\n  const setUserAsTyping = data => {\n    const {\n      userId\n    } = data;\n\n    _updateUserProp(userId, \"typing\", true);\n  };\n\n  const setUserAsNotTyping = data => {\n    const {\n      userId\n    } = data;\n\n    _updateUserProp(userId, \"typing\", false);\n  }; /////////////////////////////////////////////////////////\n\n  /*\tconst fetchMessageResponse = (data) => {\n  \t\tsetUsers((users) => {\n  \t\t\tconst { sender, response } = data;\n  console.log(data);\n  \t\t\tlet userIndex = users.findIndex((user) => user.id === userId);\n  \t\t\tconst usersCopy = JSON.parse(JSON.stringify(users));\n  \t\t\tconst newMsgObject = {\n  \t\t\t\tcontent: response,\n  \t\t\t\tsender: userId,\n  \t\t\t\ttime: new Date().toLocaleTimeString(),\n  \t\t\t\tstatus: null,\n  \t\t\t};\n  \n  \t\t\tusersCopy[userIndex].messages.TODAY.push(newMsgObject);\n  \n  \n  \t\t\treturn usersCopy;\n  \t\t});\n  \t};\n  \t*/\n\n\n  const fetchMessageResponse = data => {\n    setUsers(users => {\n      const {\n        idUsu,\n        message\n      } = data;\n      console.log(data);\n      let userIndex = users.findIndex(user => user.id === idUsu);\n      const usersCopy = JSON.parse(JSON.stringify(users));\n      const newMsgObject = {\n        content: message,\n        sender: idUsu,\n        time: new Date().toLocaleTimeString(),\n        status: null\n      };\n      usersCopy[userIndex].messages.TODAY.push(newMsgObject);\n      return usersCopy;\n    });\n  };\n\n  useEffect(() => {\n    socket.on(\"fetch_response\", fetchMessageResponse);\n    socket.on(\"start_typing\", setUserAsTyping);\n    socket.on(\"stop_typing\", setUserAsNotTyping);\n  }, [socket]);\n\n  const addNewMessage = (userId, message, idUsu) => {\n    let userIndex = users.findIndex(user => user.id === userId);\n    console.log(userId, message, idUsu);\n    const usersCopy = [...users];\n    const newMsgObject = {\n      sender: idUsu,\n      text: message,\n      receiver: userId,\n      time: new Date().toLocaleTimeString(),\n      status: \"delivered\"\n    }; //////////\n\n    console.log(newMsgObject);\n    usersCopy[userIndex].messages.TODAY.push(newMsgObject);\n    setUsers(usersCopy);\n    socket.emit(\"sendMessage\", {\n      userId,\n      message,\n      idUsu\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(UsersContext.Provider, {\n    value: {\n      users,\n      setUserAsUnread,\n      addNewMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 3\n  }, this);\n};\n\n_s2(UsersProvider, \"AazzwWV+S4w6PF0cRN6m9L93jio=\", false, function () {\n  return [useSocketContext];\n});\n\n_c = UsersProvider;\nexport { useUsersContext, UsersProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersProvider\");","map":{"version":3,"sources":["/home/carlos/Escritorio/proyecto progra/cloneWp/src/context/usersContext.js"],"names":["createContext","useContext","useEffect","useState","contacts","useSocketContext","UsersContext","useUsersContext","UsersProvider","children","socket","arrivalMessage","setArrivalMessage","users","setUsers","_updateUserProp","userId","prop","value","usersCopy","userIndex","findIndex","user","id","userObject","setUserAsUnread","setUserAsTyping","data","setUserAsNotTyping","fetchMessageResponse","idUsu","message","console","log","JSON","parse","stringify","newMsgObject","content","sender","time","Date","toLocaleTimeString","status","messages","TODAY","push","on","addNewMessage","text","receiver","emit"],"mappings":"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","sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\nimport contacts from \"data/contacts\";\nimport { useSocketContext} from \"./socketContext\";\n\nconst UsersContext = createContext();\n\nconst useUsersContext = () => useContext(UsersContext);\n\nconst UsersProvider = ({ children }) => {\n\n\tconst socket = useSocketContext();\n\tconst [arrivalMessage, setArrivalMessage] = useState(null);\n\n\n\n\tconst [users, setUsers] = useState(contacts);\n\n\tconst _updateUserProp = (userId, prop, value) => {\n\t\tsetUsers((users) => {\n\t\t\tconst usersCopy = [...users];\n\t\t\tlet userIndex = users.findIndex((user) => user.id === userId);\n\t\t\tconst userObject = usersCopy[userIndex];\n\t\t\tusersCopy[userIndex] = { ...userObject, [prop]: value };\n\t\t//\tconsole.log(usersCopy[userIndex].id+\"   envia\");\n\t\t\treturn usersCopy;\n\n\t\t});\n\t};\n\n\n\n\tconst setUserAsUnread = (userId) => {\n\t\t_updateUserProp(userId, \"unread\", 0);\n\n\t//\tconsole.log(userId+\"   r1111egresa\");\n\t};\n\n\n\n\n\n\n\tconst setUserAsTyping = (data) => {\n\t\tconst { userId } = data;\n\t\t_updateUserProp(userId, \"typing\", true);\n\t};\n\n\tconst setUserAsNotTyping = (data) => {\n\t\tconst { userId } = data;\n\t\t_updateUserProp(userId, \"typing\", false);\n\t};\n/////////////////////////////////////////////////////////\n/*\tconst fetchMessageResponse = (data) => {\n\t\tsetUsers((users) => {\n\t\t\tconst { sender, response } = data;\nconsole.log(data);\n\t\t\tlet userIndex = users.findIndex((user) => user.id === userId);\n\t\t\tconst usersCopy = JSON.parse(JSON.stringify(users));\n\t\t\tconst newMsgObject = {\n\t\t\t\tcontent: response,\n\t\t\t\tsender: userId,\n\t\t\t\ttime: new Date().toLocaleTimeString(),\n\t\t\t\tstatus: null,\n\t\t\t};\n\n\t\t\tusersCopy[userIndex].messages.TODAY.push(newMsgObject);\n\n\n\t\t\treturn usersCopy;\n\t\t});\n\t};\n\t*/\n\n\tconst fetchMessageResponse = (data) => {\n\t\tsetUsers((users) => {\n\t\t\tconst { idUsu, message } = data;\n\t\t\tconsole.log(data);\n\t\t\tlet userIndex = users.findIndex((user) => user.id === idUsu);\n\t\t\tconst usersCopy = JSON.parse(JSON.stringify(users));\n\t\t\tconst newMsgObject = {\n\t\t\t\tcontent: message,\n\t\t\t\tsender: idUsu,\n\t\t\t\ttime: new Date().toLocaleTimeString(),\n\t\t\t\tstatus: null,\n\t\t\t};\n\n\t\t\tusersCopy[userIndex].messages.TODAY.push(newMsgObject);\n\n\n\t\t\treturn usersCopy;\n\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\tsocket.on(\"fetch_response\", fetchMessageResponse);\n\t\tsocket.on(\"start_typing\", setUserAsTyping);\n\t\tsocket.on(\"stop_typing\", setUserAsNotTyping);\n\t}, [socket]);\n\n\n\n\n\tconst addNewMessage = (userId, message,idUsu) => {\n\t\tlet userIndex = users.findIndex((user) => user.id === userId);\nconsole.log(userId, message,idUsu)\n\t\tconst usersCopy = [...users];\n\t\tconst newMsgObject = {\n\n\n\t\t\tsender:idUsu,\n\t\t\ttext: message,\n\t\t\treceiver:userId,\n\n\t\t\ttime: new Date().toLocaleTimeString(),\n\t\t\tstatus: \"delivered\",\n\t\t};\n\n\t\t//////////\n\n\t\tconsole.log(newMsgObject);\n\n\t\tusersCopy[userIndex].messages.TODAY.push(newMsgObject);\n\t\tsetUsers(usersCopy);\n\n\t\tsocket.emit(\"sendMessage\", {userId,message,idUsu});\n\t};\n\n\n\treturn (\n\t\t<UsersContext.Provider value={{ users, setUserAsUnread, addNewMessage }}>\n\t\t\t{children}\n\t\t</UsersContext.Provider>\n\t);\n};\n\nexport { useUsersContext, UsersProvider };\n"]},"metadata":{},"sourceType":"module"}